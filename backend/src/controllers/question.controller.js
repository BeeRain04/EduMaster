const Question = require('../models/question.model');
const Exam = require('../models/exam.model');

// üü¢ T·∫°o c√¢u h·ªèi
exports.create = async (req, res) => {
  try {
    const q = await Question.create(req.body);
    res.status(201).json(q);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

// üü¢ L·∫•y danh s√°ch c√¢u h·ªèi
exports.list = async (req, res) => {
  try {
    const q = await Question.find().sort({ createdAt: -1 });
    res.json(q);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

// üü¢ L·∫•y 1 c√¢u h·ªèi c·ª• th·ªÉ
exports.getOne = async (req, res) => {
  try {
    const q = await Question.findById(req.params.id);
    if (!q) return res.status(404).json({ msg: 'Not found' });
    res.json(q);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

// üü¢ C·∫≠p nh·∫≠t c√¢u h·ªèi
exports.update = async (req, res) => {
  try {
    const q = await Question.findByIdAndUpdate(req.params.id, req.body, { new: true });
    if (!q) return res.status(404).json({ msg: 'Not found' });
    res.json(q);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

// üü¢ X√≥a c√¢u h·ªèi
exports.remove = async (req, res) => {
  try {
    const qId = req.params.id;
    const question = await Question.findById(qId);
    if (!question) return res.status(404).json({ error: 'Question not found' });

    // ki·ªÉm tra xem c√≥ exam n√†o ƒëang d√πng c√¢u h·ªèi n√†y kh√¥ng
    const examUsing = await Exam.exists({ questionIds: qId });
    if (examUsing) {
      return res.status(400).json({
        error: 'Kh√¥ng th·ªÉ xo√° c√¢u h·ªèi v√¨ ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng trong ƒë·ªÅ thi.'
      });
    }

    await Question.findByIdAndDelete(qId);
    res.json({ message: 'Question deleted' });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};
